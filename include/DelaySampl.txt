


opcode DelaySampl, aa, aakkkkkkki
ainL, ainR, kinvol, ktime, kfeedback, kspeed, kreset, kpause, ktimechange, imaxtime  xin
;setksmps 1
;basic buffer with feedback, no time modulation
;inputs
;ainL, ainR
;controls
;kinvol; input volume
;ktime;loop time in seconds
;kfeedback; feedback 
;kspeed lontre kspeed multiplicator
;kreset - reset pointer to buffer start
;ktimechange - when not 0 allow time change without altering current pointer position
;constants 
;imaxtime; maximum time of the buffer in seconds
;buffers / memory
ibufL ftgentmp 0, 0, sr * imaxtime, 2, 0
ibufR ftgentmp 0, 0, sr * imaxtime, 2, 0

ktime_ init 1

;resetting pointer
if kreset == 1 && changed(kreset) == 1 then
	asyncin = 1
else
	asyncin = 0
endif


;/resetting pointer
;buffer indexing

koffset init 0

restart:

aphase, asyncout syncphasor kspeed / ktime, asyncin, i(koffset)

rigoto reend

;end pause
if kpause == 0 && changed(kpause) == 1 then
    asyncin = 1
     kenv_ = 1
     reinit restart
endif

;begin pause
aoffset init 0
if kpause == 1 && changed(kpause) == 1 then
    koffset = k(aphase)
    kenv_ = 0
endif

  
;timechange quantize action - change loop time preserving pointer position
if ktimechange > 0 && changed(ktimechange) == 1 then
    koffset = k(aphase) * ktime / ktime_
    if koffset > 1 then
        koffset = 0; if new value outside boundaries reset to begin
    endif
    ktime_ = ktime
    ktimechange = 0
    reinit restart
endif

reend:
ktime_ = ktime

apointw = aphase * ktime * sr
;/buffer indexing

kenv_ init 1
kenv port kenv_, 0.02

;buffer reading -> writing
afrom_ibufL tablei apointw, ibufL
afrom_ibufR tablei apointw, ibufR
;writing
tablew afrom_ibufL * kfeedback + ainL * kinvol * kenv_, apointw, ibufL
tablew afrom_ibufR * kfeedback + ainR * kinvol * kenv_, apointw, ibufR
;/buffer reading -> writing

xout afrom_ibufL * kfeedback * kenv, afrom_ibufR * kfeedback * kenv
endop

