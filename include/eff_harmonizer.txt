#define EFF_HARMONIZER#

;tonality
ktonality = int(kpar_1 * 11.1)

;interval                                   t  2  3  4, 5  6  7
iintevals ftgentmp 0, 0, 8, -2, 0, 2, 4, 5, 7, 9, 11;semitones to major
kinterval_m tab int(kpar_2 * 6.1), iintevals

;octave
koctave init 1
if kpar_3 < 0.25 then
    koctave = 0.25
elseif kpar_3 >= 0.25 && kpar_3 < 0.5 then
    koctave = 0.5
elseif kpar_3 >= 0.5 && kpar_3 < 0.75 then
    koctave = 1
else
    koctave = 2
endif

iscala ftgentmp 0, 0, 16, -2, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1

;lowest f = sr / ifftsize
fain  pvsanal ain, gifftsize, gioverlap, giwinsize, giwinshape
kfr_tracked, kamp pvspitch fain, 0.01

;input Frequency to midi note number
knote = 69 + 12 * log2(kfr_tracked / 440)
knote limit knote, 0, 127
knote init 0
knote_r = round(knote) % 12;find the note
knote_r init 0

kst_diff = (knote_r - ktonality) % 12;different semitones
if kst_diff < 0 then
    kst_diff = kst_diff + 12
endif

;check for input note
wronginnote:
krightinnote tab kst_diff, iscala
if krightinnote == 1 kgoto rigthinnote
if krightinnote == 0 then
    kst_diff =(kst_diff + 1) % 12
    kgoto wronginnote
endif
rigthinnote:

;check for harmonized note
kinterval = kinterval_m
wronghanote:
kharmnote = (kst_diff + kinterval) % 12
krighthanote tab kharmnote, iscala
if krighthanote == 1 kgoto rigthhanote
if krighthanote == 0 then
    if kinterval_m == 5 then
        kinterval = kinterval + 1
    else
        kinterval = kinterval - 1
    endif
    kgoto wronghanote
endif
rigthhanote:

;shift and synth
ksemitdiff port kinterval, 0.02
ikeepform init 0
kgainsh init 1
kcoefs init 100
fsig pvscale fain, semitone(ksemitdiff) * koctave, ikeepform, kgainsh, kcoefs
fsigs pvsmooth fsig, 0.9, 0.9
aout pvsynth fsigs
#